/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as RedirectRouteImport } from './routes/redirect'
import { Route as OrganisationsRouteImport } from './routes/organisations'
import { Route as DeferredRouteImport } from './routes/deferred'
import { Route as PathlessLayoutRouteImport } from './routes/_pathlessLayout'
import { Route as UsersRouteRouteImport } from './routes/users.route'
import { Route as PostsRouteRouteImport } from './routes/posts.route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as UsersIndexRouteImport } from './routes/users.index'
import { Route as PostsIndexRouteImport } from './routes/posts.index'
import { Route as UsersUserIdRouteImport } from './routes/users.$userId'
import { Route as SettingsProfile2RouteImport } from './routes/settings/profile2'
import { Route as SettingsProfileRouteImport } from './routes/settings/profile'
import { Route as SchedulesIdRouteImport } from './routes/schedules_.$id'
import { Route as PostsPostIdRouteImport } from './routes/posts.$postId'
import { Route as OrganisationsOrgIdRouteImport } from './routes/organisations_.$orgId'
import { Route as DepartmentDepIdRouteImport } from './routes/department_.$depId'
import { Route as AuthSignupRouteImport } from './routes/auth/signup'
import { Route as AuthLogoutRouteImport } from './routes/auth/logout'
import { Route as AuthLoginRouteImport } from './routes/auth/login'
import { Route as PathlessLayoutNestedLayoutRouteImport } from './routes/_pathlessLayout/_nested-layout'
import { Route as SchedulesIdIndexRouteImport } from './routes/schedules_.$id/index'
import { Route as SettingsProfilePasswordRouteImport } from './routes/settings/profile.password'
import { Route as SchedulesIdTasksRouteImport } from './routes/schedules_.$id/tasks'
import { Route as SchedulesIdMembersRouteImport } from './routes/schedules_.$id/members'
import { Route as SchedulesIdForwardsRouteImport } from './routes/schedules_.$id/forwards'
import { Route as PostsPostIdDeepRouteImport } from './routes/posts_.$postId.deep'
import { Route as DepartmentDepIdTasksRouteImport } from './routes/department_.$depId.tasks'
import { Route as DepartmentDepIdSpecialDatesRouteImport } from './routes/department_.$depId.special-dates'
import { Route as DepartmentDepIdSchedulesRouteImport } from './routes/department_.$depId.schedules'
import { Route as DepartmentDepIdEmployeesRouteImport } from './routes/department_.$depId.employees'
import { Route as PathlessLayoutNestedLayoutRouteBRouteImport } from './routes/_pathlessLayout/_nested-layout/route-b'
import { Route as PathlessLayoutNestedLayoutRouteARouteImport } from './routes/_pathlessLayout/_nested-layout/route-a'
import { Route as OrgDepSdlRouteImport } from './routes/$org.$dep_.$sdl'
import { Route as SettingsProfilePasswordCreateRouteImport } from './routes/settings/profile.password_.create'
import { ServerRoute as ApiUsersServerRouteImport } from './routes/api.users'
import { ServerRoute as ApiUsersIdServerRouteImport } from './routes/api/users.$id'

const rootServerRouteImport = createServerRootRoute()

const RedirectRoute = RedirectRouteImport.update({
  id: '/redirect',
  path: '/redirect',
  getParentRoute: () => rootRouteImport,
} as any)
const OrganisationsRoute = OrganisationsRouteImport.update({
  id: '/organisations',
  path: '/organisations',
  getParentRoute: () => rootRouteImport,
} as any)
const DeferredRoute = DeferredRouteImport.update({
  id: '/deferred',
  path: '/deferred',
  getParentRoute: () => rootRouteImport,
} as any)
const PathlessLayoutRoute = PathlessLayoutRouteImport.update({
  id: '/_pathlessLayout',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersRouteRoute = UsersRouteRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => rootRouteImport,
} as any)
const PostsRouteRoute = PostsRouteRouteImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersIndexRoute = UsersIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => UsersRouteRoute,
} as any)
const PostsIndexRoute = PostsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PostsRouteRoute,
} as any)
const UsersUserIdRoute = UsersUserIdRouteImport.update({
  id: '/$userId',
  path: '/$userId',
  getParentRoute: () => UsersRouteRoute,
} as any)
const SettingsProfile2Route = SettingsProfile2RouteImport.update({
  id: '/settings/profile2',
  path: '/settings/profile2',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsProfileRoute = SettingsProfileRouteImport.update({
  id: '/settings/profile',
  path: '/settings/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const SchedulesIdRoute = SchedulesIdRouteImport.update({
  id: '/schedules_/$id',
  path: '/schedules/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const PostsPostIdRoute = PostsPostIdRouteImport.update({
  id: '/$postId',
  path: '/$postId',
  getParentRoute: () => PostsRouteRoute,
} as any)
const OrganisationsOrgIdRoute = OrganisationsOrgIdRouteImport.update({
  id: '/organisations_/$orgId',
  path: '/organisations/$orgId',
  getParentRoute: () => rootRouteImport,
} as any)
const DepartmentDepIdRoute = DepartmentDepIdRouteImport.update({
  id: '/department_/$depId',
  path: '/department/$depId',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthSignupRoute = AuthSignupRouteImport.update({
  id: '/auth/signup',
  path: '/auth/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLogoutRoute = AuthLogoutRouteImport.update({
  id: '/auth/logout',
  path: '/auth/logout',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteImport,
} as any)
const PathlessLayoutNestedLayoutRoute =
  PathlessLayoutNestedLayoutRouteImport.update({
    id: '/_nested-layout',
    getParentRoute: () => PathlessLayoutRoute,
  } as any)
const SchedulesIdIndexRoute = SchedulesIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SchedulesIdRoute,
} as any)
const SettingsProfilePasswordRoute = SettingsProfilePasswordRouteImport.update({
  id: '/password',
  path: '/password',
  getParentRoute: () => SettingsProfileRoute,
} as any)
const SchedulesIdTasksRoute = SchedulesIdTasksRouteImport.update({
  id: '/tasks',
  path: '/tasks',
  getParentRoute: () => SchedulesIdRoute,
} as any)
const SchedulesIdMembersRoute = SchedulesIdMembersRouteImport.update({
  id: '/members',
  path: '/members',
  getParentRoute: () => SchedulesIdRoute,
} as any)
const SchedulesIdForwardsRoute = SchedulesIdForwardsRouteImport.update({
  id: '/forwards',
  path: '/forwards',
  getParentRoute: () => SchedulesIdRoute,
} as any)
const PostsPostIdDeepRoute = PostsPostIdDeepRouteImport.update({
  id: '/posts_/$postId/deep',
  path: '/posts/$postId/deep',
  getParentRoute: () => rootRouteImport,
} as any)
const DepartmentDepIdTasksRoute = DepartmentDepIdTasksRouteImport.update({
  id: '/tasks',
  path: '/tasks',
  getParentRoute: () => DepartmentDepIdRoute,
} as any)
const DepartmentDepIdSpecialDatesRoute =
  DepartmentDepIdSpecialDatesRouteImport.update({
    id: '/special-dates',
    path: '/special-dates',
    getParentRoute: () => DepartmentDepIdRoute,
  } as any)
const DepartmentDepIdSchedulesRoute =
  DepartmentDepIdSchedulesRouteImport.update({
    id: '/schedules',
    path: '/schedules',
    getParentRoute: () => DepartmentDepIdRoute,
  } as any)
const DepartmentDepIdEmployeesRoute =
  DepartmentDepIdEmployeesRouteImport.update({
    id: '/employees',
    path: '/employees',
    getParentRoute: () => DepartmentDepIdRoute,
  } as any)
const PathlessLayoutNestedLayoutRouteBRoute =
  PathlessLayoutNestedLayoutRouteBRouteImport.update({
    id: '/route-b',
    path: '/route-b',
    getParentRoute: () => PathlessLayoutNestedLayoutRoute,
  } as any)
const PathlessLayoutNestedLayoutRouteARoute =
  PathlessLayoutNestedLayoutRouteARouteImport.update({
    id: '/route-a',
    path: '/route-a',
    getParentRoute: () => PathlessLayoutNestedLayoutRoute,
  } as any)
const OrgDepSdlRoute = OrgDepSdlRouteImport.update({
  id: '/$org/$dep_/$sdl',
  path: '/$org/$dep/$sdl',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsProfilePasswordCreateRoute =
  SettingsProfilePasswordCreateRouteImport.update({
    id: '/password_/create',
    path: '/password/create',
    getParentRoute: () => SettingsProfileRoute,
  } as any)
const ApiUsersServerRoute = ApiUsersServerRouteImport.update({
  id: '/api/users',
  path: '/api/users',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiUsersIdServerRoute = ApiUsersIdServerRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => ApiUsersServerRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/posts': typeof PostsRouteRouteWithChildren
  '/users': typeof UsersRouteRouteWithChildren
  '/deferred': typeof DeferredRoute
  '/organisations': typeof OrganisationsRoute
  '/redirect': typeof RedirectRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/logout': typeof AuthLogoutRoute
  '/auth/signup': typeof AuthSignupRoute
  '/department/$depId': typeof DepartmentDepIdRouteWithChildren
  '/organisations/$orgId': typeof OrganisationsOrgIdRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/schedules/$id': typeof SchedulesIdRouteWithChildren
  '/settings/profile': typeof SettingsProfileRouteWithChildren
  '/settings/profile2': typeof SettingsProfile2Route
  '/users/$userId': typeof UsersUserIdRoute
  '/posts/': typeof PostsIndexRoute
  '/users/': typeof UsersIndexRoute
  '/$org/$dep/$sdl': typeof OrgDepSdlRoute
  '/route-a': typeof PathlessLayoutNestedLayoutRouteARoute
  '/route-b': typeof PathlessLayoutNestedLayoutRouteBRoute
  '/department/$depId/employees': typeof DepartmentDepIdEmployeesRoute
  '/department/$depId/schedules': typeof DepartmentDepIdSchedulesRoute
  '/department/$depId/special-dates': typeof DepartmentDepIdSpecialDatesRoute
  '/department/$depId/tasks': typeof DepartmentDepIdTasksRoute
  '/posts/$postId/deep': typeof PostsPostIdDeepRoute
  '/schedules/$id/forwards': typeof SchedulesIdForwardsRoute
  '/schedules/$id/members': typeof SchedulesIdMembersRoute
  '/schedules/$id/tasks': typeof SchedulesIdTasksRoute
  '/settings/profile/password': typeof SettingsProfilePasswordRoute
  '/schedules/$id/': typeof SchedulesIdIndexRoute
  '/settings/profile/password/create': typeof SettingsProfilePasswordCreateRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/deferred': typeof DeferredRoute
  '/organisations': typeof OrganisationsRoute
  '/redirect': typeof RedirectRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/logout': typeof AuthLogoutRoute
  '/auth/signup': typeof AuthSignupRoute
  '/department/$depId': typeof DepartmentDepIdRouteWithChildren
  '/organisations/$orgId': typeof OrganisationsOrgIdRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/settings/profile': typeof SettingsProfileRouteWithChildren
  '/settings/profile2': typeof SettingsProfile2Route
  '/users/$userId': typeof UsersUserIdRoute
  '/posts': typeof PostsIndexRoute
  '/users': typeof UsersIndexRoute
  '/$org/$dep/$sdl': typeof OrgDepSdlRoute
  '/route-a': typeof PathlessLayoutNestedLayoutRouteARoute
  '/route-b': typeof PathlessLayoutNestedLayoutRouteBRoute
  '/department/$depId/employees': typeof DepartmentDepIdEmployeesRoute
  '/department/$depId/schedules': typeof DepartmentDepIdSchedulesRoute
  '/department/$depId/special-dates': typeof DepartmentDepIdSpecialDatesRoute
  '/department/$depId/tasks': typeof DepartmentDepIdTasksRoute
  '/posts/$postId/deep': typeof PostsPostIdDeepRoute
  '/schedules/$id/forwards': typeof SchedulesIdForwardsRoute
  '/schedules/$id/members': typeof SchedulesIdMembersRoute
  '/schedules/$id/tasks': typeof SchedulesIdTasksRoute
  '/settings/profile/password': typeof SettingsProfilePasswordRoute
  '/schedules/$id': typeof SchedulesIdIndexRoute
  '/settings/profile/password/create': typeof SettingsProfilePasswordCreateRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/posts': typeof PostsRouteRouteWithChildren
  '/users': typeof UsersRouteRouteWithChildren
  '/_pathlessLayout': typeof PathlessLayoutRouteWithChildren
  '/deferred': typeof DeferredRoute
  '/organisations': typeof OrganisationsRoute
  '/redirect': typeof RedirectRoute
  '/_pathlessLayout/_nested-layout': typeof PathlessLayoutNestedLayoutRouteWithChildren
  '/auth/login': typeof AuthLoginRoute
  '/auth/logout': typeof AuthLogoutRoute
  '/auth/signup': typeof AuthSignupRoute
  '/department_/$depId': typeof DepartmentDepIdRouteWithChildren
  '/organisations_/$orgId': typeof OrganisationsOrgIdRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/schedules_/$id': typeof SchedulesIdRouteWithChildren
  '/settings/profile': typeof SettingsProfileRouteWithChildren
  '/settings/profile2': typeof SettingsProfile2Route
  '/users/$userId': typeof UsersUserIdRoute
  '/posts/': typeof PostsIndexRoute
  '/users/': typeof UsersIndexRoute
  '/$org/$dep_/$sdl': typeof OrgDepSdlRoute
  '/_pathlessLayout/_nested-layout/route-a': typeof PathlessLayoutNestedLayoutRouteARoute
  '/_pathlessLayout/_nested-layout/route-b': typeof PathlessLayoutNestedLayoutRouteBRoute
  '/department_/$depId/employees': typeof DepartmentDepIdEmployeesRoute
  '/department_/$depId/schedules': typeof DepartmentDepIdSchedulesRoute
  '/department_/$depId/special-dates': typeof DepartmentDepIdSpecialDatesRoute
  '/department_/$depId/tasks': typeof DepartmentDepIdTasksRoute
  '/posts_/$postId/deep': typeof PostsPostIdDeepRoute
  '/schedules_/$id/forwards': typeof SchedulesIdForwardsRoute
  '/schedules_/$id/members': typeof SchedulesIdMembersRoute
  '/schedules_/$id/tasks': typeof SchedulesIdTasksRoute
  '/settings/profile/password': typeof SettingsProfilePasswordRoute
  '/schedules_/$id/': typeof SchedulesIdIndexRoute
  '/settings/profile/password_/create': typeof SettingsProfilePasswordCreateRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/posts'
    | '/users'
    | '/deferred'
    | '/organisations'
    | '/redirect'
    | '/auth/login'
    | '/auth/logout'
    | '/auth/signup'
    | '/department/$depId'
    | '/organisations/$orgId'
    | '/posts/$postId'
    | '/schedules/$id'
    | '/settings/profile'
    | '/settings/profile2'
    | '/users/$userId'
    | '/posts/'
    | '/users/'
    | '/$org/$dep/$sdl'
    | '/route-a'
    | '/route-b'
    | '/department/$depId/employees'
    | '/department/$depId/schedules'
    | '/department/$depId/special-dates'
    | '/department/$depId/tasks'
    | '/posts/$postId/deep'
    | '/schedules/$id/forwards'
    | '/schedules/$id/members'
    | '/schedules/$id/tasks'
    | '/settings/profile/password'
    | '/schedules/$id/'
    | '/settings/profile/password/create'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/deferred'
    | '/organisations'
    | '/redirect'
    | '/auth/login'
    | '/auth/logout'
    | '/auth/signup'
    | '/department/$depId'
    | '/organisations/$orgId'
    | '/posts/$postId'
    | '/settings/profile'
    | '/settings/profile2'
    | '/users/$userId'
    | '/posts'
    | '/users'
    | '/$org/$dep/$sdl'
    | '/route-a'
    | '/route-b'
    | '/department/$depId/employees'
    | '/department/$depId/schedules'
    | '/department/$depId/special-dates'
    | '/department/$depId/tasks'
    | '/posts/$postId/deep'
    | '/schedules/$id/forwards'
    | '/schedules/$id/members'
    | '/schedules/$id/tasks'
    | '/settings/profile/password'
    | '/schedules/$id'
    | '/settings/profile/password/create'
  id:
    | '__root__'
    | '/'
    | '/posts'
    | '/users'
    | '/_pathlessLayout'
    | '/deferred'
    | '/organisations'
    | '/redirect'
    | '/_pathlessLayout/_nested-layout'
    | '/auth/login'
    | '/auth/logout'
    | '/auth/signup'
    | '/department_/$depId'
    | '/organisations_/$orgId'
    | '/posts/$postId'
    | '/schedules_/$id'
    | '/settings/profile'
    | '/settings/profile2'
    | '/users/$userId'
    | '/posts/'
    | '/users/'
    | '/$org/$dep_/$sdl'
    | '/_pathlessLayout/_nested-layout/route-a'
    | '/_pathlessLayout/_nested-layout/route-b'
    | '/department_/$depId/employees'
    | '/department_/$depId/schedules'
    | '/department_/$depId/special-dates'
    | '/department_/$depId/tasks'
    | '/posts_/$postId/deep'
    | '/schedules_/$id/forwards'
    | '/schedules_/$id/members'
    | '/schedules_/$id/tasks'
    | '/settings/profile/password'
    | '/schedules_/$id/'
    | '/settings/profile/password_/create'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PostsRouteRoute: typeof PostsRouteRouteWithChildren
  UsersRouteRoute: typeof UsersRouteRouteWithChildren
  PathlessLayoutRoute: typeof PathlessLayoutRouteWithChildren
  DeferredRoute: typeof DeferredRoute
  OrganisationsRoute: typeof OrganisationsRoute
  RedirectRoute: typeof RedirectRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthLogoutRoute: typeof AuthLogoutRoute
  AuthSignupRoute: typeof AuthSignupRoute
  DepartmentDepIdRoute: typeof DepartmentDepIdRouteWithChildren
  OrganisationsOrgIdRoute: typeof OrganisationsOrgIdRoute
  SchedulesIdRoute: typeof SchedulesIdRouteWithChildren
  SettingsProfileRoute: typeof SettingsProfileRouteWithChildren
  SettingsProfile2Route: typeof SettingsProfile2Route
  OrgDepSdlRoute: typeof OrgDepSdlRoute
  PostsPostIdDeepRoute: typeof PostsPostIdDeepRoute
}
export interface FileServerRoutesByFullPath {
  '/api/users': typeof ApiUsersServerRouteWithChildren
  '/api/users/$id': typeof ApiUsersIdServerRoute
}
export interface FileServerRoutesByTo {
  '/api/users': typeof ApiUsersServerRouteWithChildren
  '/api/users/$id': typeof ApiUsersIdServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/users': typeof ApiUsersServerRouteWithChildren
  '/api/users/$id': typeof ApiUsersIdServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/users' | '/api/users/$id'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/users' | '/api/users/$id'
  id: '__root__' | '/api/users' | '/api/users/$id'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiUsersServerRoute: typeof ApiUsersServerRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/redirect': {
      id: '/redirect'
      path: '/redirect'
      fullPath: '/redirect'
      preLoaderRoute: typeof RedirectRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/organisations': {
      id: '/organisations'
      path: '/organisations'
      fullPath: '/organisations'
      preLoaderRoute: typeof OrganisationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/deferred': {
      id: '/deferred'
      path: '/deferred'
      fullPath: '/deferred'
      preLoaderRoute: typeof DeferredRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_pathlessLayout': {
      id: '/_pathlessLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/posts': {
      id: '/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users/': {
      id: '/users/'
      path: '/'
      fullPath: '/users/'
      preLoaderRoute: typeof UsersIndexRouteImport
      parentRoute: typeof UsersRouteRoute
    }
    '/posts/': {
      id: '/posts/'
      path: '/'
      fullPath: '/posts/'
      preLoaderRoute: typeof PostsIndexRouteImport
      parentRoute: typeof PostsRouteRoute
    }
    '/users/$userId': {
      id: '/users/$userId'
      path: '/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof UsersUserIdRouteImport
      parentRoute: typeof UsersRouteRoute
    }
    '/settings/profile2': {
      id: '/settings/profile2'
      path: '/settings/profile2'
      fullPath: '/settings/profile2'
      preLoaderRoute: typeof SettingsProfile2RouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/profile': {
      id: '/settings/profile'
      path: '/settings/profile'
      fullPath: '/settings/profile'
      preLoaderRoute: typeof SettingsProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/schedules_/$id': {
      id: '/schedules_/$id'
      path: '/schedules/$id'
      fullPath: '/schedules/$id'
      preLoaderRoute: typeof SchedulesIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/posts/$postId': {
      id: '/posts/$postId'
      path: '/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdRouteImport
      parentRoute: typeof PostsRouteRoute
    }
    '/organisations_/$orgId': {
      id: '/organisations_/$orgId'
      path: '/organisations/$orgId'
      fullPath: '/organisations/$orgId'
      preLoaderRoute: typeof OrganisationsOrgIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/department_/$depId': {
      id: '/department_/$depId'
      path: '/department/$depId'
      fullPath: '/department/$depId'
      preLoaderRoute: typeof DepartmentDepIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/signup': {
      id: '/auth/signup'
      path: '/auth/signup'
      fullPath: '/auth/signup'
      preLoaderRoute: typeof AuthSignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/logout': {
      id: '/auth/logout'
      path: '/auth/logout'
      fullPath: '/auth/logout'
      preLoaderRoute: typeof AuthLogoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_pathlessLayout/_nested-layout': {
      id: '/_pathlessLayout/_nested-layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutNestedLayoutRouteImport
      parentRoute: typeof PathlessLayoutRoute
    }
    '/schedules_/$id/': {
      id: '/schedules_/$id/'
      path: '/'
      fullPath: '/schedules/$id/'
      preLoaderRoute: typeof SchedulesIdIndexRouteImport
      parentRoute: typeof SchedulesIdRoute
    }
    '/settings/profile/password': {
      id: '/settings/profile/password'
      path: '/password'
      fullPath: '/settings/profile/password'
      preLoaderRoute: typeof SettingsProfilePasswordRouteImport
      parentRoute: typeof SettingsProfileRoute
    }
    '/schedules_/$id/tasks': {
      id: '/schedules_/$id/tasks'
      path: '/tasks'
      fullPath: '/schedules/$id/tasks'
      preLoaderRoute: typeof SchedulesIdTasksRouteImport
      parentRoute: typeof SchedulesIdRoute
    }
    '/schedules_/$id/members': {
      id: '/schedules_/$id/members'
      path: '/members'
      fullPath: '/schedules/$id/members'
      preLoaderRoute: typeof SchedulesIdMembersRouteImport
      parentRoute: typeof SchedulesIdRoute
    }
    '/schedules_/$id/forwards': {
      id: '/schedules_/$id/forwards'
      path: '/forwards'
      fullPath: '/schedules/$id/forwards'
      preLoaderRoute: typeof SchedulesIdForwardsRouteImport
      parentRoute: typeof SchedulesIdRoute
    }
    '/posts_/$postId/deep': {
      id: '/posts_/$postId/deep'
      path: '/posts/$postId/deep'
      fullPath: '/posts/$postId/deep'
      preLoaderRoute: typeof PostsPostIdDeepRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/department_/$depId/tasks': {
      id: '/department_/$depId/tasks'
      path: '/tasks'
      fullPath: '/department/$depId/tasks'
      preLoaderRoute: typeof DepartmentDepIdTasksRouteImport
      parentRoute: typeof DepartmentDepIdRoute
    }
    '/department_/$depId/special-dates': {
      id: '/department_/$depId/special-dates'
      path: '/special-dates'
      fullPath: '/department/$depId/special-dates'
      preLoaderRoute: typeof DepartmentDepIdSpecialDatesRouteImport
      parentRoute: typeof DepartmentDepIdRoute
    }
    '/department_/$depId/schedules': {
      id: '/department_/$depId/schedules'
      path: '/schedules'
      fullPath: '/department/$depId/schedules'
      preLoaderRoute: typeof DepartmentDepIdSchedulesRouteImport
      parentRoute: typeof DepartmentDepIdRoute
    }
    '/department_/$depId/employees': {
      id: '/department_/$depId/employees'
      path: '/employees'
      fullPath: '/department/$depId/employees'
      preLoaderRoute: typeof DepartmentDepIdEmployeesRouteImport
      parentRoute: typeof DepartmentDepIdRoute
    }
    '/_pathlessLayout/_nested-layout/route-b': {
      id: '/_pathlessLayout/_nested-layout/route-b'
      path: '/route-b'
      fullPath: '/route-b'
      preLoaderRoute: typeof PathlessLayoutNestedLayoutRouteBRouteImport
      parentRoute: typeof PathlessLayoutNestedLayoutRoute
    }
    '/_pathlessLayout/_nested-layout/route-a': {
      id: '/_pathlessLayout/_nested-layout/route-a'
      path: '/route-a'
      fullPath: '/route-a'
      preLoaderRoute: typeof PathlessLayoutNestedLayoutRouteARouteImport
      parentRoute: typeof PathlessLayoutNestedLayoutRoute
    }
    '/$org/$dep_/$sdl': {
      id: '/$org/$dep_/$sdl'
      path: '/$org/$dep/$sdl'
      fullPath: '/$org/$dep/$sdl'
      preLoaderRoute: typeof OrgDepSdlRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/profile/password_/create': {
      id: '/settings/profile/password_/create'
      path: '/password/create'
      fullPath: '/settings/profile/password/create'
      preLoaderRoute: typeof SettingsProfilePasswordCreateRouteImport
      parentRoute: typeof SettingsProfileRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/users': {
      id: '/api/users'
      path: '/api/users'
      fullPath: '/api/users'
      preLoaderRoute: typeof ApiUsersServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/users/$id': {
      id: '/api/users/$id'
      path: '/$id'
      fullPath: '/api/users/$id'
      preLoaderRoute: typeof ApiUsersIdServerRouteImport
      parentRoute: typeof ApiUsersServerRoute
    }
  }
}

interface PostsRouteRouteChildren {
  PostsPostIdRoute: typeof PostsPostIdRoute
  PostsIndexRoute: typeof PostsIndexRoute
}

const PostsRouteRouteChildren: PostsRouteRouteChildren = {
  PostsPostIdRoute: PostsPostIdRoute,
  PostsIndexRoute: PostsIndexRoute,
}

const PostsRouteRouteWithChildren = PostsRouteRoute._addFileChildren(
  PostsRouteRouteChildren,
)

interface UsersRouteRouteChildren {
  UsersUserIdRoute: typeof UsersUserIdRoute
  UsersIndexRoute: typeof UsersIndexRoute
}

const UsersRouteRouteChildren: UsersRouteRouteChildren = {
  UsersUserIdRoute: UsersUserIdRoute,
  UsersIndexRoute: UsersIndexRoute,
}

const UsersRouteRouteWithChildren = UsersRouteRoute._addFileChildren(
  UsersRouteRouteChildren,
)

interface PathlessLayoutNestedLayoutRouteChildren {
  PathlessLayoutNestedLayoutRouteARoute: typeof PathlessLayoutNestedLayoutRouteARoute
  PathlessLayoutNestedLayoutRouteBRoute: typeof PathlessLayoutNestedLayoutRouteBRoute
}

const PathlessLayoutNestedLayoutRouteChildren: PathlessLayoutNestedLayoutRouteChildren =
  {
    PathlessLayoutNestedLayoutRouteARoute:
      PathlessLayoutNestedLayoutRouteARoute,
    PathlessLayoutNestedLayoutRouteBRoute:
      PathlessLayoutNestedLayoutRouteBRoute,
  }

const PathlessLayoutNestedLayoutRouteWithChildren =
  PathlessLayoutNestedLayoutRoute._addFileChildren(
    PathlessLayoutNestedLayoutRouteChildren,
  )

interface PathlessLayoutRouteChildren {
  PathlessLayoutNestedLayoutRoute: typeof PathlessLayoutNestedLayoutRouteWithChildren
}

const PathlessLayoutRouteChildren: PathlessLayoutRouteChildren = {
  PathlessLayoutNestedLayoutRoute: PathlessLayoutNestedLayoutRouteWithChildren,
}

const PathlessLayoutRouteWithChildren = PathlessLayoutRoute._addFileChildren(
  PathlessLayoutRouteChildren,
)

interface DepartmentDepIdRouteChildren {
  DepartmentDepIdEmployeesRoute: typeof DepartmentDepIdEmployeesRoute
  DepartmentDepIdSchedulesRoute: typeof DepartmentDepIdSchedulesRoute
  DepartmentDepIdSpecialDatesRoute: typeof DepartmentDepIdSpecialDatesRoute
  DepartmentDepIdTasksRoute: typeof DepartmentDepIdTasksRoute
}

const DepartmentDepIdRouteChildren: DepartmentDepIdRouteChildren = {
  DepartmentDepIdEmployeesRoute: DepartmentDepIdEmployeesRoute,
  DepartmentDepIdSchedulesRoute: DepartmentDepIdSchedulesRoute,
  DepartmentDepIdSpecialDatesRoute: DepartmentDepIdSpecialDatesRoute,
  DepartmentDepIdTasksRoute: DepartmentDepIdTasksRoute,
}

const DepartmentDepIdRouteWithChildren = DepartmentDepIdRoute._addFileChildren(
  DepartmentDepIdRouteChildren,
)

interface SchedulesIdRouteChildren {
  SchedulesIdForwardsRoute: typeof SchedulesIdForwardsRoute
  SchedulesIdMembersRoute: typeof SchedulesIdMembersRoute
  SchedulesIdTasksRoute: typeof SchedulesIdTasksRoute
  SchedulesIdIndexRoute: typeof SchedulesIdIndexRoute
}

const SchedulesIdRouteChildren: SchedulesIdRouteChildren = {
  SchedulesIdForwardsRoute: SchedulesIdForwardsRoute,
  SchedulesIdMembersRoute: SchedulesIdMembersRoute,
  SchedulesIdTasksRoute: SchedulesIdTasksRoute,
  SchedulesIdIndexRoute: SchedulesIdIndexRoute,
}

const SchedulesIdRouteWithChildren = SchedulesIdRoute._addFileChildren(
  SchedulesIdRouteChildren,
)

interface SettingsProfileRouteChildren {
  SettingsProfilePasswordRoute: typeof SettingsProfilePasswordRoute
  SettingsProfilePasswordCreateRoute: typeof SettingsProfilePasswordCreateRoute
}

const SettingsProfileRouteChildren: SettingsProfileRouteChildren = {
  SettingsProfilePasswordRoute: SettingsProfilePasswordRoute,
  SettingsProfilePasswordCreateRoute: SettingsProfilePasswordCreateRoute,
}

const SettingsProfileRouteWithChildren = SettingsProfileRoute._addFileChildren(
  SettingsProfileRouteChildren,
)

interface ApiUsersServerRouteChildren {
  ApiUsersIdServerRoute: typeof ApiUsersIdServerRoute
}

const ApiUsersServerRouteChildren: ApiUsersServerRouteChildren = {
  ApiUsersIdServerRoute: ApiUsersIdServerRoute,
}

const ApiUsersServerRouteWithChildren = ApiUsersServerRoute._addFileChildren(
  ApiUsersServerRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PostsRouteRoute: PostsRouteRouteWithChildren,
  UsersRouteRoute: UsersRouteRouteWithChildren,
  PathlessLayoutRoute: PathlessLayoutRouteWithChildren,
  DeferredRoute: DeferredRoute,
  OrganisationsRoute: OrganisationsRoute,
  RedirectRoute: RedirectRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthLogoutRoute: AuthLogoutRoute,
  AuthSignupRoute: AuthSignupRoute,
  DepartmentDepIdRoute: DepartmentDepIdRouteWithChildren,
  OrganisationsOrgIdRoute: OrganisationsOrgIdRoute,
  SchedulesIdRoute: SchedulesIdRouteWithChildren,
  SettingsProfileRoute: SettingsProfileRouteWithChildren,
  SettingsProfile2Route: SettingsProfile2Route,
  OrgDepSdlRoute: OrgDepSdlRoute,
  PostsPostIdDeepRoute: PostsPostIdDeepRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiUsersServerRoute: ApiUsersServerRouteWithChildren,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
